// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package eth_contarct

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// EthErc20MetaData contains all meta data concerning the EthErc20 contract.
var EthErc20MetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"mintingAllowedAfter_\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"MinterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minimumTimeBetweenMints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintCap\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingAllowedAfter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040526b033b2e3c9fd0803ce80000006000553480156200002157600080fd5b506040516200456938038062004569833981810160405262000047919081019062000244565b428110156200008d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000849062000362565b60405180910390fd5b600054600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6000546040516200015f919062000384565b60405180910390a381600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3b0007eb941cf645526cbb3a4fdaecda9d28ce4843167d9263b536a1f1edc0f66000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051620001fe92919062000335565b60405180910390a18060028190555050505062000460565b60008151905062000227816200042c565b92915050565b6000815190506200023e8162000446565b92915050565b6000806000606084860312156200025a57600080fd5b60006200026a8682870162000216565b93505060206200027d8682870162000216565b925050604062000290868287016200022d565b9150509250925092565b620002a581620003f0565b82525050565b620002b681620003b2565b82525050565b6000620002cb603983620003a1565b91507f556e693a3a636f6e7374727563746f723a206d696e74696e672063616e206f6e60008301527f6c7920626567696e206166746572206465706c6f796d656e74000000000000006020830152604082019050919050565b6200032f81620003e6565b82525050565b60006040820190506200034c60008301856200029a565b6200035b6020830184620002ab565b9392505050565b600060208201905081810360008301526200037d81620002bc565b9050919050565b60006020820190506200039b600083018462000324565b92915050565b600082825260208201905092915050565b6000620003bf82620003c6565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000620003fd8262000404565b9050919050565b6000620004118262000418565b9050919050565b60006200042582620003c6565b9050919050565b6200043781620003b2565b81146200044357600080fd5b50565b6200045181620003e6565b81146200045d57600080fd5b50565b6140f980620004706000396000f3fe608060405234801561001057600080fd5b50600436106101a95760003560e01c80636fcfff45116100f9578063b4b5ea5711610097578063dd62ed3e11610071578063dd62ed3e146104fa578063e7a324dc1461052a578063f1127ed814610548578063fca3b5aa14610579576101a9565b8063b4b5ea5714610492578063c3cda520146104c2578063d505accf146104de576101a9565b8063782d6fe1116100d3578063782d6fe1146103e45780637ecebe001461041457806395d89b4114610444578063a9059cbb14610462576101a9565b80636fcfff451461036657806370a082311461039657806376c71ca1146103c6576101a9565b806330adf81f1161016657806340c10f191161014057806340c10f19146102e0578063587cde1e146102fc5780635c11d62f1461032c5780635c19a95c1461034a576101a9565b806330adf81f1461028657806330b36cef146102a4578063313ce567146102c2576101a9565b806306fdde03146101ae57806307546172146101cc578063095ea7b3146101ea57806318160ddd1461021a57806320606b701461023857806323b872dd14610256575b600080fd5b6101b6610595565b6040516101c39190613a16565b60405180910390f35b6101d46105ce565b6040516101e1919061386c565b60405180910390f35b61020460048036036101ff9190810190612e94565b6105f4565b60405161021191906138b0565b60405180910390f35b610222610787565b60405161022f9190613c5a565b60405180910390f35b61024061078d565b60405161024d91906138cb565b60405180910390f35b610270600480360361026b9190810190612da7565b6107a4565b60405161027d91906138b0565b60405180910390f35b61028e610a38565b60405161029b91906138cb565b60405180910390f35b6102ac610a4f565b6040516102b99190613c5a565b60405180910390f35b6102ca610a55565b6040516102d79190613cb9565b60405180910390f35b6102fa60048036036102f59190810190612e94565b610a5a565b005b61031660048036036103119190810190612d42565b610e55565b604051610323919061386c565b60405180910390f35b610334610e88565b6040516103419190613c75565b60405180910390f35b610364600480360361035f9190810190612d42565b610e90565b005b610380600480360361037b9190810190612d42565b610e9d565b60405161038d9190613c75565b60405180910390f35b6103b060048036036103ab9190810190612d42565b610ec0565b6040516103bd9190613c5a565b60405180910390f35b6103ce610f2f565b6040516103db9190613cb9565b60405180910390f35b6103fe60048036036103f99190810190612e94565b610f34565b60405161040b9190613cef565b60405180910390f35b61042e60048036036104299190810190612d42565b611347565b60405161043b9190613c5a565b60405180910390f35b61044c61135f565b6040516104599190613a16565b60405180910390f35b61047c60048036036104779190810190612e94565b611398565b60405161048991906138b0565b60405180910390f35b6104ac60048036036104a79190810190612d42565b6113d5565b6040516104b99190613cef565b60405180910390f35b6104dc60048036036104d79190810190612ed0565b6114c3565b005b6104f860048036036104f39190810190612df6565b611766565b005b610514600480360361050f9190810190612d6b565b611bb8565b6040516105219190613c5a565b60405180910390f35b610532611c65565b60405161053f91906138cb565b60405180910390f35b610562600480360361055d9190810190612f59565b611c7c565b604051610570929190613c90565b60405180910390f35b610593600480360361058e9190810190612d42565b611cd5565b005b6040518060400160405280600781526020017f556e69737761700000000000000000000000000000000000000000000000000081525081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831415610647577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff905061066c565b6106698360405180606001604052806024815260200161406460249139611e04565b90505b80600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107749190613cd4565b60405180910390a3600191505092915050565b60005481565b60405161079990613842565b604051809103902081565b6000803390506000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a90046bffffffffffffffffffffffff16905060006108678560405180606001604052806024815260200161406460249139611e04565b90508673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156108e157507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6bffffffffffffffffffffffff16826bffffffffffffffffffffffff1614155b15610a1f57600061090b83836040518060600160405280603c8152602001613ee4603c9139611e62565b905080600360008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508373ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610a159190613cd4565b60405180910390a3505b610a2a878783611ed3565b600193505050509392505050565b604051610a449061382d565b604051809103902081565b60025481565b601281565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610aea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae190613b7a565b60405180910390fd5b600254421015610b2f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2690613afa565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9690613ada565b60405180910390fd5b610bb3426301e1338063ffffffff166122b4565b6002819055506000610bdd8260405180606001604052806021815260200161404360219139611e04565b9050610bf9610bf2600054600260ff16612309565b6064612379565b816bffffffffffffffffffffffff161115610c49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4090613b5a565b60405180910390fd5b610c84610c66600054836bffffffffffffffffffffffff166122b4565b604051806060016040528060268152602001613f2060269139611e04565b6bffffffffffffffffffffffff16600081905550610d12600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a90046bffffffffffffffffffffffff1682604051806060016040528060248152602001613ec0602491396123c3565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610ddd9190613cd4565b60405180910390a3610e506000600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683612439565b505050565b60056020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6301e1338081565b610e9a3382612734565b50565b60076020528060005260406000206000915054906101000a900463ffffffff1681565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff169050919050565b600281565b6000438210610f78576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f6f90613aba565b60405180910390fd5b6000600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff16905060008163ffffffff161415610fe5576000915050611341565b82600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001840363ffffffff1663ffffffff16815260200190815260200160002060000160009054906101000a900463ffffffff1663ffffffff16116110e757600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001830363ffffffff1663ffffffff16815260200190815260200160002060000160049054906101000a90046bffffffffffffffffffffffff16915050611341565b82600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008063ffffffff16815260200190815260200160002060000160009054906101000a900463ffffffff1663ffffffff161115611168576000915050611341565b600080905060006001830390505b8163ffffffff168163ffffffff1611156112c3576000600283830363ffffffff168161119e57fe5b04820390506111ab612cab565b600660008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008363ffffffff1663ffffffff1681526020019081526020016000206040518060400160405290816000820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016000820160049054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff166bffffffffffffffffffffffff1681525050905086816000015163ffffffff16141561129b57806020015195505050505050611341565b86816000015163ffffffff1610156112b5578193506112bc565b6001820392505b5050611176565b600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008363ffffffff1663ffffffff16815260200190815260200160002060000160049054906101000a90046bffffffffffffffffffffffff1693505050505b92915050565b60086020528060005260406000206000915090505481565b6040518060400160405280600381526020017f554e49000000000000000000000000000000000000000000000000000000000081525081565b6000806113bd8360405180606001604052806025815260200161401e60259139611e04565b90506113ca338583611ed3565b600191505092915050565b600080600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff16905060008163ffffffff161161143f5760006114bb565b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001830363ffffffff1663ffffffff16815260200190815260200160002060000160049054906101000a90046bffffffffffffffffffffffff165b915050919050565b60006040516114d190613842565b60405180910390206040518060400160405280600781526020017f556e6973776170000000000000000000000000000000000000000000000000008152508051906020012061151e6128f4565b30604051602001611532949392919061398c565b604051602081830303815290604052805190602001209050600060405161155890613857565b60405180910390208888886040516020016115769493929190613947565b604051602081830303815290604052805190602001209050600082826040516020016115a39291906137f6565b6040516020818303038152906040528051906020012090506000600182888888604051600081526020016040526040516115e094939291906139d1565b6020604051602081039080840390855afa158015611602573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561167e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167590613a9a565b60405180910390fd5b600860008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055891461170d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170490613bba565b60405180910390fd5b87421115611750576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174790613a5a565b60405180910390fd5b61175a818b612734565b50505050505050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8614156117b8577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90506117dd565b6117da86604051806060016040528060238152602001613f7b60239139611e04565b90505b60006040516117eb90613842565b60405180910390206040518060400160405280600781526020017f556e697377617000000000000000000000000000000000000000000000000000815250805190602001206118386128f4565b3060405160200161184c949392919061398c565b60405160208183030381529060405280519060200120905060006040516118729061382d565b60405180910390208a8a8a600860008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600101919050558b6040516020016118e1969594939291906138e6565b6040516020818303038152906040528051906020012090506000828260405160200161190e9291906137f6565b60405160208183030381529060405280519060200120905060006001828989896040516000815260200160405260405161194b94939291906139d1565b6020604051602081039080840390855afa15801561196d573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156119e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e090613c1a565b60405180910390fd5b8b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611a57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4e90613c3a565b60405180910390fd5b88421115611a9a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9190613bfa565b60405180910390fd5b84600360008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508a73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92587604051611ba29190613cd4565b60405180910390a3505050505050505050505050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a90046bffffffffffffffffffffffff166bffffffffffffffffffffffff16905092915050565b604051611c7190613857565b604051809103902081565b6006602052816000526040600020602052806000526040600020600091509150508060000160009054906101000a900463ffffffff16908060000160049054906101000a90046bffffffffffffffffffffffff16905082565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611d65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5c90613b9a565b60405180910390fd5b7f3b0007eb941cf645526cbb3a4fdaecda9d28ce4843167d9263b536a1f1edc0f6600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682604051611db8929190613887565b60405180910390a180600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006c0100000000000000000000000083108290611e58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e4f9190613a38565b60405180910390fd5b5082905092915050565b6000836bffffffffffffffffffffffff16836bffffffffffffffffffffffff1611158290611ec6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ebd9190613a38565b60405180910390fd5b5082840390509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611f43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3a90613bda565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611fb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611faa90613b1a565b60405180910390fd5b61202d600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a90046bffffffffffffffffffffffff1682604051806060016040528060358152602001613f4660359139611e62565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550612114600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a90046bffffffffffffffffffffffff16826040518060600160405280602f8152602001614088602f91396123c3565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516121de9190613cd4565b60405180910390a36122af600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1683612439565b505050565b6000808284019050838110156122ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122f690613a7a565b60405180910390fd5b8091505092915050565b60008083141561231c5760009050612373565b600082840290508284828161232d57fe5b041461236e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161236590613b3a565b60405180910390fd5b809150505b92915050565b60006123bb83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612901565b905092915050565b6000808385019050846bffffffffffffffffffffffff16816bffffffffffffffffffffffff161015839061242d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124249190613a38565b60405180910390fd5b50809150509392505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561248357506000816bffffffffffffffffffffffff16115b1561272f57600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146125db576000600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff1690506000808263ffffffff16116125265760006125a2565b600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001840363ffffffff1663ffffffff16815260200190815260200160002060000160049054906101000a90046bffffffffffffffffffffffff165b905060006125c98285604051806060016040528060278152602001613ff760279139611e62565b90506125d786848484612962565b5050505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461272e576000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff1690506000808263ffffffff16116126795760006126f5565b600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001840363ffffffff1663ffffffff16815260200190815260200160002060000160049054906101000a90046bffffffffffffffffffffffff165b9050600061271c8285604051806060016040528060268152602001613f9e602691396123c3565b905061272a85848484612962565b5050505b5b505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a90046bffffffffffffffffffffffff16905082600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f60405160405180910390a46128ee828483612439565b50505050565b6000804690508091505090565b60008083118290612948576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161293f9190613a38565b60405180910390fd5b50600083858161295457fe5b049050809150509392505050565b600061298643604051806060016040528060338152602001613fc460339139612c55565b905060008463ffffffff16118015612a1b57508063ffffffff16600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001870363ffffffff1663ffffffff16815260200190815260200160002060000160009054906101000a900463ffffffff1663ffffffff16145b15612ab65781600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006001870363ffffffff1663ffffffff16815260200190815260200160002060000160046101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff160217905550612bfe565b60405180604001604052808263ffffffff168152602001836bffffffffffffffffffffffff16815250600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008663ffffffff1663ffffffff16815260200190815260200160002060008201518160000160006101000a81548163ffffffff021916908363ffffffff16021790555060208201518160000160046101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff16021790555090505060018401600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055505b8473ffffffffffffffffffffffffffffffffffffffff167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a7248484604051612c46929190613d0a565b60405180910390a25050505050565b600064010000000083108290612ca1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c989190613a38565b60405180910390fd5b5082905092915050565b6040518060400160405280600063ffffffff16815260200160006bffffffffffffffffffffffff1681525090565b600081359050612ce881613e4c565b92915050565b600081359050612cfd81613e63565b92915050565b600081359050612d1281613e7a565b92915050565b600081359050612d2781613e91565b92915050565b600081359050612d3c81613ea8565b92915050565b600060208284031215612d5457600080fd5b6000612d6284828501612cd9565b91505092915050565b60008060408385031215612d7e57600080fd5b6000612d8c85828601612cd9565b9250506020612d9d85828601612cd9565b9150509250929050565b600080600060608486031215612dbc57600080fd5b6000612dca86828701612cd9565b9350506020612ddb86828701612cd9565b9250506040612dec86828701612d03565b9150509250925092565b600080600080600080600060e0888a031215612e1157600080fd5b6000612e1f8a828b01612cd9565b9750506020612e308a828b01612cd9565b9650506040612e418a828b01612d03565b9550506060612e528a828b01612d03565b9450506080612e638a828b01612d2d565b93505060a0612e748a828b01612cee565b92505060c0612e858a828b01612cee565b91505092959891949750929550565b60008060408385031215612ea757600080fd5b6000612eb585828601612cd9565b9250506020612ec685828601612d03565b9150509250929050565b60008060008060008060c08789031215612ee957600080fd5b6000612ef789828a01612cd9565b9650506020612f0889828a01612d03565b9550506040612f1989828a01612d03565b9450506060612f2a89828a01612d2d565b9350506080612f3b89828a01612cee565b92505060a0612f4c89828a01612cee565b9150509295509295509295565b60008060408385031215612f6c57600080fd5b6000612f7a85828601612cd9565b9250506020612f8b85828601612d18565b9150509250929050565b612f9e81613d65565b82525050565b612fad81613d77565b82525050565b612fbc81613d83565b82525050565b612fd3612fce82613d83565b613e31565b82525050565b6000612fe482613d3e565b612fee8185613d49565b9350612ffe818560208601613dfe565b61300781613e3b565b840191505092915050565b600061301d82613d33565b6130278185613d49565b9350613037818560208601613dfe565b61304081613e3b565b840191505092915050565b6000613058602583613d49565b91507f556e693a3a64656c656761746542795369673a207369676e617475726520657860008301527f70697265640000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006130be600283613d5a565b91507f19010000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b60006130fe601b83613d49565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b600061313e602583613d49565b91507f556e693a3a64656c656761746542795369673a20696e76616c6964207369676e60008301527f61747572650000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006131a4602683613d49565b91507f556e693a3a6765745072696f72566f7465733a206e6f7420796574206465746560008301527f726d696e656400000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061320a602e83613d49565b91507f556e693a3a6d696e743a2063616e6e6f74207472616e7366657220746f20746860008301527f65207a65726f20616464726573730000000000000000000000000000000000006020830152604082019050919050565b6000613270605283613d5a565b91507f5065726d69742861646472657373206f776e65722c616464726573732073706560008301527f6e6465722c75696e743235362076616c75652c75696e74323536206e6f6e636560208301527f2c75696e7432353620646561646c696e652900000000000000000000000000006040830152605282019050919050565b60006132fc602283613d49565b91507f556e693a3a6d696e743a206d696e74696e67206e6f7420616c6c6f776564207960008301527f65740000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613362604383613d5a565b91507f454950373132446f6d61696e28737472696e67206e616d652c75696e7432353660008301527f20636861696e49642c6164647265737320766572696679696e67436f6e74726160208301527f63742900000000000000000000000000000000000000000000000000000000006040830152604382019050919050565b60006133ee603983613d49565b91507f556e693a3a5f7472616e73666572546f6b656e733a2063616e6e6f742074726160008301527f6e7366657220746f20746865207a65726f2061646472657373000000000000006020830152604082019050919050565b6000613454602183613d49565b91507f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008301527f77000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006134ba601c83613d49565b91507f556e693a3a6d696e743a206578636565646564206d696e7420636170000000006000830152602082019050919050565b60006134fa602383613d49565b91507f556e693a3a6d696e743a206f6e6c7920746865206d696e7465722063616e206d60008301527f696e7400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613560603d83613d49565b91507f556e693a3a7365744d696e7465723a206f6e6c7920746865206d696e7465722060008301527f63616e206368616e676520746865206d696e74657220616464726573730000006020830152604082019050919050565b60006135c6602183613d49565b91507f556e693a3a64656c656761746542795369673a20696e76616c6964206e6f6e6360008301527f65000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061362c603b83613d49565b91507f556e693a3a5f7472616e73666572546f6b656e733a2063616e6e6f742074726160008301527f6e736665722066726f6d20746865207a65726f206164647265737300000000006020830152604082019050919050565b6000613692601e83613d49565b91507f556e693a3a7065726d69743a207369676e6174757265206578706972656400006000830152602082019050919050565b60006136d2603a83613d5a565b91507f44656c65676174696f6e28616464726573732064656c6567617465652c75696e60008301527f74323536206e6f6e63652c75696e7432353620657870697279290000000000006020830152603a82019050919050565b6000613738601e83613d49565b91507f556e693a3a7065726d69743a20696e76616c6964207369676e617475726500006000830152602082019050919050565b6000613778601983613d49565b91507f556e693a3a7065726d69743a20756e617574686f72697a6564000000000000006000830152602082019050919050565b6137b481613dad565b82525050565b6137c381613db7565b82525050565b6137d281613dc7565b82525050565b6137e181613dec565b82525050565b6137f081613dd4565b82525050565b6000613801826130b1565b915061380d8285612fc2565b60208201915061381d8284612fc2565b6020820191508190509392505050565b600061383882613263565b9150819050919050565b600061384d82613355565b9150819050919050565b6000613862826136c5565b9150819050919050565b60006020820190506138816000830184612f95565b92915050565b600060408201905061389c6000830185612f95565b6138a96020830184612f95565b9392505050565b60006020820190506138c56000830184612fa4565b92915050565b60006020820190506138e06000830184612fb3565b92915050565b600060c0820190506138fb6000830189612fb3565b6139086020830188612f95565b6139156040830187612f95565b61392260608301866137ab565b61392f60808301856137ab565b61393c60a08301846137ab565b979650505050505050565b600060808201905061395c6000830187612fb3565b6139696020830186612f95565b61397660408301856137ab565b61398360608301846137ab565b95945050505050565b60006080820190506139a16000830187612fb3565b6139ae6020830186612fb3565b6139bb60408301856137ab565b6139c86060830184612f95565b95945050505050565b60006080820190506139e66000830187612fb3565b6139f360208301866137c9565b613a006040830185612fb3565b613a0d6060830184612fb3565b95945050505050565b60006020820190508181036000830152613a308184613012565b905092915050565b60006020820190508181036000830152613a528184612fd9565b905092915050565b60006020820190508181036000830152613a738161304b565b9050919050565b60006020820190508181036000830152613a93816130f1565b9050919050565b60006020820190508181036000830152613ab381613131565b9050919050565b60006020820190508181036000830152613ad381613197565b9050919050565b60006020820190508181036000830152613af3816131fd565b9050919050565b60006020820190508181036000830152613b13816132ef565b9050919050565b60006020820190508181036000830152613b33816133e1565b9050919050565b60006020820190508181036000830152613b5381613447565b9050919050565b60006020820190508181036000830152613b73816134ad565b9050919050565b60006020820190508181036000830152613b93816134ed565b9050919050565b60006020820190508181036000830152613bb381613553565b9050919050565b60006020820190508181036000830152613bd3816135b9565b9050919050565b60006020820190508181036000830152613bf38161361f565b9050919050565b60006020820190508181036000830152613c1381613685565b9050919050565b60006020820190508181036000830152613c338161372b565b9050919050565b60006020820190508181036000830152613c538161376b565b9050919050565b6000602082019050613c6f60008301846137ab565b92915050565b6000602082019050613c8a60008301846137ba565b92915050565b6000604082019050613ca560008301856137ba565b613cb260208301846137e7565b9392505050565b6000602082019050613cce60008301846137c9565b92915050565b6000602082019050613ce960008301846137d8565b92915050565b6000602082019050613d0460008301846137e7565b92915050565b6000604082019050613d1f60008301856137d8565b613d2c60208301846137d8565b9392505050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000613d7082613d8d565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b60006bffffffffffffffffffffffff82169050919050565b6000613df782613dd4565b9050919050565b60005b83811015613e1c578082015181840152602081019050613e01565b83811115613e2b576000848401525b50505050565b6000819050919050565b6000601f19601f8301169050919050565b613e5581613d65565b8114613e6057600080fd5b50565b613e6c81613d83565b8114613e7757600080fd5b50565b613e8381613dad565b8114613e8e57600080fd5b50565b613e9a81613db7565b8114613ea557600080fd5b50565b613eb181613dc7565b8114613ebc57600080fd5b5056fe556e693a3a6d696e743a207472616e7366657220616d6f756e74206f766572666c6f7773556e693a3a7472616e7366657246726f6d3a207472616e7366657220616d6f756e742065786365656473207370656e64657220616c6c6f77616e6365556e693a3a6d696e743a20746f74616c537570706c7920657863656564732039362062697473556e693a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e7420657863656564732062616c616e6365556e693a3a7065726d69743a20616d6f756e7420657863656564732039362062697473556e693a3a5f6d6f7665566f7465733a20766f746520616d6f756e74206f766572666c6f7773556e693a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d62657220657863656564732033322062697473556e693a3a5f6d6f7665566f7465733a20766f746520616d6f756e7420756e646572666c6f7773556e693a3a7472616e736665723a20616d6f756e7420657863656564732039362062697473556e693a3a6d696e743a20616d6f756e7420657863656564732039362062697473556e693a3a617070726f76653a20616d6f756e7420657863656564732039362062697473556e693a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e74206f766572666c6f7773a365627a7a723158202fc7bd673f709cbe3f999fe1113a1e6eb5867e21929110c85546bf6057e149c56c6578706572696d656e74616cf564736f6c63430005100040",
}

// EthErc20ABI is the input ABI used to generate the binding from.
// Deprecated: Use EthErc20MetaData.ABI instead.
var EthErc20ABI = EthErc20MetaData.ABI

// EthErc20Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use EthErc20MetaData.Bin instead.
var EthErc20Bin = EthErc20MetaData.Bin

// DeployEthErc20 deploys a new Ethereum contract, binding an instance of EthErc20 to it.
func DeployEthErc20(auth *bind.TransactOpts, backend bind.ContractBackend, account common.Address, minter_ common.Address, mintingAllowedAfter_ *big.Int) (common.Address, *types.Transaction, *EthErc20, error) {
	parsed, err := EthErc20MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(EthErc20Bin), backend, account, minter_, mintingAllowedAfter_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &EthErc20{EthErc20Caller: EthErc20Caller{contract: contract}, EthErc20Transactor: EthErc20Transactor{contract: contract}, EthErc20Filterer: EthErc20Filterer{contract: contract}}, nil
}

// EthErc20 is an auto generated Go binding around an Ethereum contract.
type EthErc20 struct {
	EthErc20Caller     // Read-only binding to the contract
	EthErc20Transactor // Write-only binding to the contract
	EthErc20Filterer   // Log filterer for contract events
}

// EthErc20Caller is an auto generated read-only Go binding around an Ethereum contract.
type EthErc20Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthErc20Transactor is an auto generated write-only Go binding around an Ethereum contract.
type EthErc20Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthErc20Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type EthErc20Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// EthErc20Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type EthErc20Session struct {
	Contract     *EthErc20         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// EthErc20CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type EthErc20CallerSession struct {
	Contract *EthErc20Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// EthErc20TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type EthErc20TransactorSession struct {
	Contract     *EthErc20Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// EthErc20Raw is an auto generated low-level Go binding around an Ethereum contract.
type EthErc20Raw struct {
	Contract *EthErc20 // Generic contract binding to access the raw methods on
}

// EthErc20CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type EthErc20CallerRaw struct {
	Contract *EthErc20Caller // Generic read-only contract binding to access the raw methods on
}

// EthErc20TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type EthErc20TransactorRaw struct {
	Contract *EthErc20Transactor // Generic write-only contract binding to access the raw methods on
}

// NewEthErc20 creates a new instance of EthErc20, bound to a specific deployed contract.
func NewEthErc20(address common.Address, backend bind.ContractBackend) (*EthErc20, error) {
	contract, err := bindEthErc20(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &EthErc20{EthErc20Caller: EthErc20Caller{contract: contract}, EthErc20Transactor: EthErc20Transactor{contract: contract}, EthErc20Filterer: EthErc20Filterer{contract: contract}}, nil
}

// NewEthErc20Caller creates a new read-only instance of EthErc20, bound to a specific deployed contract.
func NewEthErc20Caller(address common.Address, caller bind.ContractCaller) (*EthErc20Caller, error) {
	contract, err := bindEthErc20(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &EthErc20Caller{contract: contract}, nil
}

// NewEthErc20Transactor creates a new write-only instance of EthErc20, bound to a specific deployed contract.
func NewEthErc20Transactor(address common.Address, transactor bind.ContractTransactor) (*EthErc20Transactor, error) {
	contract, err := bindEthErc20(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &EthErc20Transactor{contract: contract}, nil
}

// NewEthErc20Filterer creates a new log filterer instance of EthErc20, bound to a specific deployed contract.
func NewEthErc20Filterer(address common.Address, filterer bind.ContractFilterer) (*EthErc20Filterer, error) {
	contract, err := bindEthErc20(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &EthErc20Filterer{contract: contract}, nil
}

// bindEthErc20 binds a generic wrapper to an already deployed contract.
func bindEthErc20(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(EthErc20ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthErc20 *EthErc20Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthErc20.Contract.EthErc20Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthErc20 *EthErc20Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthErc20.Contract.EthErc20Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthErc20 *EthErc20Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthErc20.Contract.EthErc20Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_EthErc20 *EthErc20CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _EthErc20.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_EthErc20 *EthErc20TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _EthErc20.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_EthErc20 *EthErc20TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _EthErc20.Contract.contract.Transact(opts, method, params...)
}

// DELEGATIONTYPEHASH is a free data retrieval call binding the contract method 0xe7a324dc.
//
// Solidity: function DELEGATION_TYPEHASH() view returns(bytes32)
func (_EthErc20 *EthErc20Caller) DELEGATIONTYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _EthErc20.contract.Call(opts, &out, "DELEGATION_TYPEHASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DELEGATIONTYPEHASH is a free data retrieval call binding the contract method 0xe7a324dc.
//
// Solidity: function DELEGATION_TYPEHASH() view returns(bytes32)
func (_EthErc20 *EthErc20Session) DELEGATIONTYPEHASH() ([32]byte, error) {
	return _EthErc20.Contract.DELEGATIONTYPEHASH(&_EthErc20.CallOpts)
}

// DELEGATIONTYPEHASH is a free data retrieval call binding the contract method 0xe7a324dc.
//
// Solidity: function DELEGATION_TYPEHASH() view returns(bytes32)
func (_EthErc20 *EthErc20CallerSession) DELEGATIONTYPEHASH() ([32]byte, error) {
	return _EthErc20.Contract.DELEGATIONTYPEHASH(&_EthErc20.CallOpts)
}

// DOMAINTYPEHASH is a free data retrieval call binding the contract method 0x20606b70.
//
// Solidity: function DOMAIN_TYPEHASH() view returns(bytes32)
func (_EthErc20 *EthErc20Caller) DOMAINTYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _EthErc20.contract.Call(opts, &out, "DOMAIN_TYPEHASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DOMAINTYPEHASH is a free data retrieval call binding the contract method 0x20606b70.
//
// Solidity: function DOMAIN_TYPEHASH() view returns(bytes32)
func (_EthErc20 *EthErc20Session) DOMAINTYPEHASH() ([32]byte, error) {
	return _EthErc20.Contract.DOMAINTYPEHASH(&_EthErc20.CallOpts)
}

// DOMAINTYPEHASH is a free data retrieval call binding the contract method 0x20606b70.
//
// Solidity: function DOMAIN_TYPEHASH() view returns(bytes32)
func (_EthErc20 *EthErc20CallerSession) DOMAINTYPEHASH() ([32]byte, error) {
	return _EthErc20.Contract.DOMAINTYPEHASH(&_EthErc20.CallOpts)
}

// PERMITTYPEHASH is a free data retrieval call binding the contract method 0x30adf81f.
//
// Solidity: function PERMIT_TYPEHASH() view returns(bytes32)
func (_EthErc20 *EthErc20Caller) PERMITTYPEHASH(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _EthErc20.contract.Call(opts, &out, "PERMIT_TYPEHASH")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PERMITTYPEHASH is a free data retrieval call binding the contract method 0x30adf81f.
//
// Solidity: function PERMIT_TYPEHASH() view returns(bytes32)
func (_EthErc20 *EthErc20Session) PERMITTYPEHASH() ([32]byte, error) {
	return _EthErc20.Contract.PERMITTYPEHASH(&_EthErc20.CallOpts)
}

// PERMITTYPEHASH is a free data retrieval call binding the contract method 0x30adf81f.
//
// Solidity: function PERMIT_TYPEHASH() view returns(bytes32)
func (_EthErc20 *EthErc20CallerSession) PERMITTYPEHASH() ([32]byte, error) {
	return _EthErc20.Contract.PERMITTYPEHASH(&_EthErc20.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address account, address spender) view returns(uint256)
func (_EthErc20 *EthErc20Caller) Allowance(opts *bind.CallOpts, account common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _EthErc20.contract.Call(opts, &out, "allowance", account, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address account, address spender) view returns(uint256)
func (_EthErc20 *EthErc20Session) Allowance(account common.Address, spender common.Address) (*big.Int, error) {
	return _EthErc20.Contract.Allowance(&_EthErc20.CallOpts, account, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address account, address spender) view returns(uint256)
func (_EthErc20 *EthErc20CallerSession) Allowance(account common.Address, spender common.Address) (*big.Int, error) {
	return _EthErc20.Contract.Allowance(&_EthErc20.CallOpts, account, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_EthErc20 *EthErc20Caller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _EthErc20.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_EthErc20 *EthErc20Session) BalanceOf(account common.Address) (*big.Int, error) {
	return _EthErc20.Contract.BalanceOf(&_EthErc20.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_EthErc20 *EthErc20CallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _EthErc20.Contract.BalanceOf(&_EthErc20.CallOpts, account)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address , uint32 ) view returns(uint32 fromBlock, uint96 votes)
func (_EthErc20 *EthErc20Caller) Checkpoints(opts *bind.CallOpts, arg0 common.Address, arg1 uint32) (struct {
	FromBlock uint32
	Votes     *big.Int
}, error) {
	var out []interface{}
	err := _EthErc20.contract.Call(opts, &out, "checkpoints", arg0, arg1)

	outstruct := new(struct {
		FromBlock uint32
		Votes     *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.FromBlock = *abi.ConvertType(out[0], new(uint32)).(*uint32)
	outstruct.Votes = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address , uint32 ) view returns(uint32 fromBlock, uint96 votes)
func (_EthErc20 *EthErc20Session) Checkpoints(arg0 common.Address, arg1 uint32) (struct {
	FromBlock uint32
	Votes     *big.Int
}, error) {
	return _EthErc20.Contract.Checkpoints(&_EthErc20.CallOpts, arg0, arg1)
}

// Checkpoints is a free data retrieval call binding the contract method 0xf1127ed8.
//
// Solidity: function checkpoints(address , uint32 ) view returns(uint32 fromBlock, uint96 votes)
func (_EthErc20 *EthErc20CallerSession) Checkpoints(arg0 common.Address, arg1 uint32) (struct {
	FromBlock uint32
	Votes     *big.Int
}, error) {
	return _EthErc20.Contract.Checkpoints(&_EthErc20.CallOpts, arg0, arg1)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_EthErc20 *EthErc20Caller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _EthErc20.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_EthErc20 *EthErc20Session) Decimals() (uint8, error) {
	return _EthErc20.Contract.Decimals(&_EthErc20.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_EthErc20 *EthErc20CallerSession) Decimals() (uint8, error) {
	return _EthErc20.Contract.Decimals(&_EthErc20.CallOpts)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address ) view returns(address)
func (_EthErc20 *EthErc20Caller) Delegates(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _EthErc20.contract.Call(opts, &out, "delegates", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address ) view returns(address)
func (_EthErc20 *EthErc20Session) Delegates(arg0 common.Address) (common.Address, error) {
	return _EthErc20.Contract.Delegates(&_EthErc20.CallOpts, arg0)
}

// Delegates is a free data retrieval call binding the contract method 0x587cde1e.
//
// Solidity: function delegates(address ) view returns(address)
func (_EthErc20 *EthErc20CallerSession) Delegates(arg0 common.Address) (common.Address, error) {
	return _EthErc20.Contract.Delegates(&_EthErc20.CallOpts, arg0)
}

// GetCurrentVotes is a free data retrieval call binding the contract method 0xb4b5ea57.
//
// Solidity: function getCurrentVotes(address account) view returns(uint96)
func (_EthErc20 *EthErc20Caller) GetCurrentVotes(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _EthErc20.contract.Call(opts, &out, "getCurrentVotes", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentVotes is a free data retrieval call binding the contract method 0xb4b5ea57.
//
// Solidity: function getCurrentVotes(address account) view returns(uint96)
func (_EthErc20 *EthErc20Session) GetCurrentVotes(account common.Address) (*big.Int, error) {
	return _EthErc20.Contract.GetCurrentVotes(&_EthErc20.CallOpts, account)
}

// GetCurrentVotes is a free data retrieval call binding the contract method 0xb4b5ea57.
//
// Solidity: function getCurrentVotes(address account) view returns(uint96)
func (_EthErc20 *EthErc20CallerSession) GetCurrentVotes(account common.Address) (*big.Int, error) {
	return _EthErc20.Contract.GetCurrentVotes(&_EthErc20.CallOpts, account)
}

// GetPriorVotes is a free data retrieval call binding the contract method 0x782d6fe1.
//
// Solidity: function getPriorVotes(address account, uint256 blockNumber) view returns(uint96)
func (_EthErc20 *EthErc20Caller) GetPriorVotes(opts *bind.CallOpts, account common.Address, blockNumber *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _EthErc20.contract.Call(opts, &out, "getPriorVotes", account, blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPriorVotes is a free data retrieval call binding the contract method 0x782d6fe1.
//
// Solidity: function getPriorVotes(address account, uint256 blockNumber) view returns(uint96)
func (_EthErc20 *EthErc20Session) GetPriorVotes(account common.Address, blockNumber *big.Int) (*big.Int, error) {
	return _EthErc20.Contract.GetPriorVotes(&_EthErc20.CallOpts, account, blockNumber)
}

// GetPriorVotes is a free data retrieval call binding the contract method 0x782d6fe1.
//
// Solidity: function getPriorVotes(address account, uint256 blockNumber) view returns(uint96)
func (_EthErc20 *EthErc20CallerSession) GetPriorVotes(account common.Address, blockNumber *big.Int) (*big.Int, error) {
	return _EthErc20.Contract.GetPriorVotes(&_EthErc20.CallOpts, account, blockNumber)
}

// MinimumTimeBetweenMints is a free data retrieval call binding the contract method 0x5c11d62f.
//
// Solidity: function minimumTimeBetweenMints() view returns(uint32)
func (_EthErc20 *EthErc20Caller) MinimumTimeBetweenMints(opts *bind.CallOpts) (uint32, error) {
	var out []interface{}
	err := _EthErc20.contract.Call(opts, &out, "minimumTimeBetweenMints")

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// MinimumTimeBetweenMints is a free data retrieval call binding the contract method 0x5c11d62f.
//
// Solidity: function minimumTimeBetweenMints() view returns(uint32)
func (_EthErc20 *EthErc20Session) MinimumTimeBetweenMints() (uint32, error) {
	return _EthErc20.Contract.MinimumTimeBetweenMints(&_EthErc20.CallOpts)
}

// MinimumTimeBetweenMints is a free data retrieval call binding the contract method 0x5c11d62f.
//
// Solidity: function minimumTimeBetweenMints() view returns(uint32)
func (_EthErc20 *EthErc20CallerSession) MinimumTimeBetweenMints() (uint32, error) {
	return _EthErc20.Contract.MinimumTimeBetweenMints(&_EthErc20.CallOpts)
}

// MintCap is a free data retrieval call binding the contract method 0x76c71ca1.
//
// Solidity: function mintCap() view returns(uint8)
func (_EthErc20 *EthErc20Caller) MintCap(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _EthErc20.contract.Call(opts, &out, "mintCap")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// MintCap is a free data retrieval call binding the contract method 0x76c71ca1.
//
// Solidity: function mintCap() view returns(uint8)
func (_EthErc20 *EthErc20Session) MintCap() (uint8, error) {
	return _EthErc20.Contract.MintCap(&_EthErc20.CallOpts)
}

// MintCap is a free data retrieval call binding the contract method 0x76c71ca1.
//
// Solidity: function mintCap() view returns(uint8)
func (_EthErc20 *EthErc20CallerSession) MintCap() (uint8, error) {
	return _EthErc20.Contract.MintCap(&_EthErc20.CallOpts)
}

// Minter is a free data retrieval call binding the contract method 0x07546172.
//
// Solidity: function minter() view returns(address)
func (_EthErc20 *EthErc20Caller) Minter(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _EthErc20.contract.Call(opts, &out, "minter")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Minter is a free data retrieval call binding the contract method 0x07546172.
//
// Solidity: function minter() view returns(address)
func (_EthErc20 *EthErc20Session) Minter() (common.Address, error) {
	return _EthErc20.Contract.Minter(&_EthErc20.CallOpts)
}

// Minter is a free data retrieval call binding the contract method 0x07546172.
//
// Solidity: function minter() view returns(address)
func (_EthErc20 *EthErc20CallerSession) Minter() (common.Address, error) {
	return _EthErc20.Contract.Minter(&_EthErc20.CallOpts)
}

// MintingAllowedAfter is a free data retrieval call binding the contract method 0x30b36cef.
//
// Solidity: function mintingAllowedAfter() view returns(uint256)
func (_EthErc20 *EthErc20Caller) MintingAllowedAfter(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _EthErc20.contract.Call(opts, &out, "mintingAllowedAfter")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MintingAllowedAfter is a free data retrieval call binding the contract method 0x30b36cef.
//
// Solidity: function mintingAllowedAfter() view returns(uint256)
func (_EthErc20 *EthErc20Session) MintingAllowedAfter() (*big.Int, error) {
	return _EthErc20.Contract.MintingAllowedAfter(&_EthErc20.CallOpts)
}

// MintingAllowedAfter is a free data retrieval call binding the contract method 0x30b36cef.
//
// Solidity: function mintingAllowedAfter() view returns(uint256)
func (_EthErc20 *EthErc20CallerSession) MintingAllowedAfter() (*big.Int, error) {
	return _EthErc20.Contract.MintingAllowedAfter(&_EthErc20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_EthErc20 *EthErc20Caller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _EthErc20.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_EthErc20 *EthErc20Session) Name() (string, error) {
	return _EthErc20.Contract.Name(&_EthErc20.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_EthErc20 *EthErc20CallerSession) Name() (string, error) {
	return _EthErc20.Contract.Name(&_EthErc20.CallOpts)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(uint256)
func (_EthErc20 *EthErc20Caller) Nonces(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var out []interface{}
	err := _EthErc20.contract.Call(opts, &out, "nonces", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(uint256)
func (_EthErc20 *EthErc20Session) Nonces(arg0 common.Address) (*big.Int, error) {
	return _EthErc20.Contract.Nonces(&_EthErc20.CallOpts, arg0)
}

// Nonces is a free data retrieval call binding the contract method 0x7ecebe00.
//
// Solidity: function nonces(address ) view returns(uint256)
func (_EthErc20 *EthErc20CallerSession) Nonces(arg0 common.Address) (*big.Int, error) {
	return _EthErc20.Contract.Nonces(&_EthErc20.CallOpts, arg0)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address ) view returns(uint32)
func (_EthErc20 *EthErc20Caller) NumCheckpoints(opts *bind.CallOpts, arg0 common.Address) (uint32, error) {
	var out []interface{}
	err := _EthErc20.contract.Call(opts, &out, "numCheckpoints", arg0)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address ) view returns(uint32)
func (_EthErc20 *EthErc20Session) NumCheckpoints(arg0 common.Address) (uint32, error) {
	return _EthErc20.Contract.NumCheckpoints(&_EthErc20.CallOpts, arg0)
}

// NumCheckpoints is a free data retrieval call binding the contract method 0x6fcfff45.
//
// Solidity: function numCheckpoints(address ) view returns(uint32)
func (_EthErc20 *EthErc20CallerSession) NumCheckpoints(arg0 common.Address) (uint32, error) {
	return _EthErc20.Contract.NumCheckpoints(&_EthErc20.CallOpts, arg0)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_EthErc20 *EthErc20Caller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _EthErc20.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_EthErc20 *EthErc20Session) Symbol() (string, error) {
	return _EthErc20.Contract.Symbol(&_EthErc20.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_EthErc20 *EthErc20CallerSession) Symbol() (string, error) {
	return _EthErc20.Contract.Symbol(&_EthErc20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_EthErc20 *EthErc20Caller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _EthErc20.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_EthErc20 *EthErc20Session) TotalSupply() (*big.Int, error) {
	return _EthErc20.Contract.TotalSupply(&_EthErc20.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_EthErc20 *EthErc20CallerSession) TotalSupply() (*big.Int, error) {
	return _EthErc20.Contract.TotalSupply(&_EthErc20.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 rawAmount) returns(bool)
func (_EthErc20 *EthErc20Transactor) Approve(opts *bind.TransactOpts, spender common.Address, rawAmount *big.Int) (*types.Transaction, error) {
	return _EthErc20.contract.Transact(opts, "approve", spender, rawAmount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 rawAmount) returns(bool)
func (_EthErc20 *EthErc20Session) Approve(spender common.Address, rawAmount *big.Int) (*types.Transaction, error) {
	return _EthErc20.Contract.Approve(&_EthErc20.TransactOpts, spender, rawAmount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 rawAmount) returns(bool)
func (_EthErc20 *EthErc20TransactorSession) Approve(spender common.Address, rawAmount *big.Int) (*types.Transaction, error) {
	return _EthErc20.Contract.Approve(&_EthErc20.TransactOpts, spender, rawAmount)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_EthErc20 *EthErc20Transactor) Delegate(opts *bind.TransactOpts, delegatee common.Address) (*types.Transaction, error) {
	return _EthErc20.contract.Transact(opts, "delegate", delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_EthErc20 *EthErc20Session) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _EthErc20.Contract.Delegate(&_EthErc20.TransactOpts, delegatee)
}

// Delegate is a paid mutator transaction binding the contract method 0x5c19a95c.
//
// Solidity: function delegate(address delegatee) returns()
func (_EthErc20 *EthErc20TransactorSession) Delegate(delegatee common.Address) (*types.Transaction, error) {
	return _EthErc20.Contract.Delegate(&_EthErc20.TransactOpts, delegatee)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_EthErc20 *EthErc20Transactor) DelegateBySig(opts *bind.TransactOpts, delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _EthErc20.contract.Transact(opts, "delegateBySig", delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_EthErc20 *EthErc20Session) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _EthErc20.Contract.DelegateBySig(&_EthErc20.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// DelegateBySig is a paid mutator transaction binding the contract method 0xc3cda520.
//
// Solidity: function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) returns()
func (_EthErc20 *EthErc20TransactorSession) DelegateBySig(delegatee common.Address, nonce *big.Int, expiry *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _EthErc20.Contract.DelegateBySig(&_EthErc20.TransactOpts, delegatee, nonce, expiry, v, r, s)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address dst, uint256 rawAmount) returns()
func (_EthErc20 *EthErc20Transactor) Mint(opts *bind.TransactOpts, dst common.Address, rawAmount *big.Int) (*types.Transaction, error) {
	return _EthErc20.contract.Transact(opts, "mint", dst, rawAmount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address dst, uint256 rawAmount) returns()
func (_EthErc20 *EthErc20Session) Mint(dst common.Address, rawAmount *big.Int) (*types.Transaction, error) {
	return _EthErc20.Contract.Mint(&_EthErc20.TransactOpts, dst, rawAmount)
}

// Mint is a paid mutator transaction binding the contract method 0x40c10f19.
//
// Solidity: function mint(address dst, uint256 rawAmount) returns()
func (_EthErc20 *EthErc20TransactorSession) Mint(dst common.Address, rawAmount *big.Int) (*types.Transaction, error) {
	return _EthErc20.Contract.Mint(&_EthErc20.TransactOpts, dst, rawAmount)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 rawAmount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_EthErc20 *EthErc20Transactor) Permit(opts *bind.TransactOpts, owner common.Address, spender common.Address, rawAmount *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _EthErc20.contract.Transact(opts, "permit", owner, spender, rawAmount, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 rawAmount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_EthErc20 *EthErc20Session) Permit(owner common.Address, spender common.Address, rawAmount *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _EthErc20.Contract.Permit(&_EthErc20.TransactOpts, owner, spender, rawAmount, deadline, v, r, s)
}

// Permit is a paid mutator transaction binding the contract method 0xd505accf.
//
// Solidity: function permit(address owner, address spender, uint256 rawAmount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) returns()
func (_EthErc20 *EthErc20TransactorSession) Permit(owner common.Address, spender common.Address, rawAmount *big.Int, deadline *big.Int, v uint8, r [32]byte, s [32]byte) (*types.Transaction, error) {
	return _EthErc20.Contract.Permit(&_EthErc20.TransactOpts, owner, spender, rawAmount, deadline, v, r, s)
}

// SetMinter is a paid mutator transaction binding the contract method 0xfca3b5aa.
//
// Solidity: function setMinter(address minter_) returns()
func (_EthErc20 *EthErc20Transactor) SetMinter(opts *bind.TransactOpts, minter_ common.Address) (*types.Transaction, error) {
	return _EthErc20.contract.Transact(opts, "setMinter", minter_)
}

// SetMinter is a paid mutator transaction binding the contract method 0xfca3b5aa.
//
// Solidity: function setMinter(address minter_) returns()
func (_EthErc20 *EthErc20Session) SetMinter(minter_ common.Address) (*types.Transaction, error) {
	return _EthErc20.Contract.SetMinter(&_EthErc20.TransactOpts, minter_)
}

// SetMinter is a paid mutator transaction binding the contract method 0xfca3b5aa.
//
// Solidity: function setMinter(address minter_) returns()
func (_EthErc20 *EthErc20TransactorSession) SetMinter(minter_ common.Address) (*types.Transaction, error) {
	return _EthErc20.Contract.SetMinter(&_EthErc20.TransactOpts, minter_)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 rawAmount) returns(bool)
func (_EthErc20 *EthErc20Transactor) Transfer(opts *bind.TransactOpts, dst common.Address, rawAmount *big.Int) (*types.Transaction, error) {
	return _EthErc20.contract.Transact(opts, "transfer", dst, rawAmount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 rawAmount) returns(bool)
func (_EthErc20 *EthErc20Session) Transfer(dst common.Address, rawAmount *big.Int) (*types.Transaction, error) {
	return _EthErc20.Contract.Transfer(&_EthErc20.TransactOpts, dst, rawAmount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address dst, uint256 rawAmount) returns(bool)
func (_EthErc20 *EthErc20TransactorSession) Transfer(dst common.Address, rawAmount *big.Int) (*types.Transaction, error) {
	return _EthErc20.Contract.Transfer(&_EthErc20.TransactOpts, dst, rawAmount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 rawAmount) returns(bool)
func (_EthErc20 *EthErc20Transactor) TransferFrom(opts *bind.TransactOpts, src common.Address, dst common.Address, rawAmount *big.Int) (*types.Transaction, error) {
	return _EthErc20.contract.Transact(opts, "transferFrom", src, dst, rawAmount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 rawAmount) returns(bool)
func (_EthErc20 *EthErc20Session) TransferFrom(src common.Address, dst common.Address, rawAmount *big.Int) (*types.Transaction, error) {
	return _EthErc20.Contract.TransferFrom(&_EthErc20.TransactOpts, src, dst, rawAmount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address src, address dst, uint256 rawAmount) returns(bool)
func (_EthErc20 *EthErc20TransactorSession) TransferFrom(src common.Address, dst common.Address, rawAmount *big.Int) (*types.Transaction, error) {
	return _EthErc20.Contract.TransferFrom(&_EthErc20.TransactOpts, src, dst, rawAmount)
}

// EthErc20ApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the EthErc20 contract.
type EthErc20ApprovalIterator struct {
	Event *EthErc20Approval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthErc20ApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthErc20Approval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthErc20Approval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthErc20ApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthErc20ApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthErc20Approval represents a Approval event raised by the EthErc20 contract.
type EthErc20Approval struct {
	Owner   common.Address
	Spender common.Address
	Amount  *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 amount)
func (_EthErc20 *EthErc20Filterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*EthErc20ApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _EthErc20.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &EthErc20ApprovalIterator{contract: _EthErc20.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 amount)
func (_EthErc20 *EthErc20Filterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *EthErc20Approval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _EthErc20.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthErc20Approval)
				if err := _EthErc20.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 amount)
func (_EthErc20 *EthErc20Filterer) ParseApproval(log types.Log) (*EthErc20Approval, error) {
	event := new(EthErc20Approval)
	if err := _EthErc20.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthErc20DelegateChangedIterator is returned from FilterDelegateChanged and is used to iterate over the raw logs and unpacked data for DelegateChanged events raised by the EthErc20 contract.
type EthErc20DelegateChangedIterator struct {
	Event *EthErc20DelegateChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthErc20DelegateChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthErc20DelegateChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthErc20DelegateChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthErc20DelegateChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthErc20DelegateChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthErc20DelegateChanged represents a DelegateChanged event raised by the EthErc20 contract.
type EthErc20DelegateChanged struct {
	Delegator    common.Address
	FromDelegate common.Address
	ToDelegate   common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterDelegateChanged is a free log retrieval operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_EthErc20 *EthErc20Filterer) FilterDelegateChanged(opts *bind.FilterOpts, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (*EthErc20DelegateChangedIterator, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _EthErc20.contract.FilterLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return &EthErc20DelegateChangedIterator{contract: _EthErc20.contract, event: "DelegateChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateChanged is a free log subscription operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_EthErc20 *EthErc20Filterer) WatchDelegateChanged(opts *bind.WatchOpts, sink chan<- *EthErc20DelegateChanged, delegator []common.Address, fromDelegate []common.Address, toDelegate []common.Address) (event.Subscription, error) {

	var delegatorRule []interface{}
	for _, delegatorItem := range delegator {
		delegatorRule = append(delegatorRule, delegatorItem)
	}
	var fromDelegateRule []interface{}
	for _, fromDelegateItem := range fromDelegate {
		fromDelegateRule = append(fromDelegateRule, fromDelegateItem)
	}
	var toDelegateRule []interface{}
	for _, toDelegateItem := range toDelegate {
		toDelegateRule = append(toDelegateRule, toDelegateItem)
	}

	logs, sub, err := _EthErc20.contract.WatchLogs(opts, "DelegateChanged", delegatorRule, fromDelegateRule, toDelegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthErc20DelegateChanged)
				if err := _EthErc20.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateChanged is a log parse operation binding the contract event 0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f.
//
// Solidity: event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate)
func (_EthErc20 *EthErc20Filterer) ParseDelegateChanged(log types.Log) (*EthErc20DelegateChanged, error) {
	event := new(EthErc20DelegateChanged)
	if err := _EthErc20.contract.UnpackLog(event, "DelegateChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthErc20DelegateVotesChangedIterator is returned from FilterDelegateVotesChanged and is used to iterate over the raw logs and unpacked data for DelegateVotesChanged events raised by the EthErc20 contract.
type EthErc20DelegateVotesChangedIterator struct {
	Event *EthErc20DelegateVotesChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthErc20DelegateVotesChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthErc20DelegateVotesChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthErc20DelegateVotesChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthErc20DelegateVotesChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthErc20DelegateVotesChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthErc20DelegateVotesChanged represents a DelegateVotesChanged event raised by the EthErc20 contract.
type EthErc20DelegateVotesChanged struct {
	Delegate        common.Address
	PreviousBalance *big.Int
	NewBalance      *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterDelegateVotesChanged is a free log retrieval operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_EthErc20 *EthErc20Filterer) FilterDelegateVotesChanged(opts *bind.FilterOpts, delegate []common.Address) (*EthErc20DelegateVotesChangedIterator, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _EthErc20.contract.FilterLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return &EthErc20DelegateVotesChangedIterator{contract: _EthErc20.contract, event: "DelegateVotesChanged", logs: logs, sub: sub}, nil
}

// WatchDelegateVotesChanged is a free log subscription operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_EthErc20 *EthErc20Filterer) WatchDelegateVotesChanged(opts *bind.WatchOpts, sink chan<- *EthErc20DelegateVotesChanged, delegate []common.Address) (event.Subscription, error) {

	var delegateRule []interface{}
	for _, delegateItem := range delegate {
		delegateRule = append(delegateRule, delegateItem)
	}

	logs, sub, err := _EthErc20.contract.WatchLogs(opts, "DelegateVotesChanged", delegateRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthErc20DelegateVotesChanged)
				if err := _EthErc20.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDelegateVotesChanged is a log parse operation binding the contract event 0xdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724.
//
// Solidity: event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)
func (_EthErc20 *EthErc20Filterer) ParseDelegateVotesChanged(log types.Log) (*EthErc20DelegateVotesChanged, error) {
	event := new(EthErc20DelegateVotesChanged)
	if err := _EthErc20.contract.UnpackLog(event, "DelegateVotesChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthErc20MinterChangedIterator is returned from FilterMinterChanged and is used to iterate over the raw logs and unpacked data for MinterChanged events raised by the EthErc20 contract.
type EthErc20MinterChangedIterator struct {
	Event *EthErc20MinterChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthErc20MinterChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthErc20MinterChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthErc20MinterChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthErc20MinterChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthErc20MinterChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthErc20MinterChanged represents a MinterChanged event raised by the EthErc20 contract.
type EthErc20MinterChanged struct {
	Minter    common.Address
	NewMinter common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterMinterChanged is a free log retrieval operation binding the contract event 0x3b0007eb941cf645526cbb3a4fdaecda9d28ce4843167d9263b536a1f1edc0f6.
//
// Solidity: event MinterChanged(address minter, address newMinter)
func (_EthErc20 *EthErc20Filterer) FilterMinterChanged(opts *bind.FilterOpts) (*EthErc20MinterChangedIterator, error) {

	logs, sub, err := _EthErc20.contract.FilterLogs(opts, "MinterChanged")
	if err != nil {
		return nil, err
	}
	return &EthErc20MinterChangedIterator{contract: _EthErc20.contract, event: "MinterChanged", logs: logs, sub: sub}, nil
}

// WatchMinterChanged is a free log subscription operation binding the contract event 0x3b0007eb941cf645526cbb3a4fdaecda9d28ce4843167d9263b536a1f1edc0f6.
//
// Solidity: event MinterChanged(address minter, address newMinter)
func (_EthErc20 *EthErc20Filterer) WatchMinterChanged(opts *bind.WatchOpts, sink chan<- *EthErc20MinterChanged) (event.Subscription, error) {

	logs, sub, err := _EthErc20.contract.WatchLogs(opts, "MinterChanged")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthErc20MinterChanged)
				if err := _EthErc20.contract.UnpackLog(event, "MinterChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinterChanged is a log parse operation binding the contract event 0x3b0007eb941cf645526cbb3a4fdaecda9d28ce4843167d9263b536a1f1edc0f6.
//
// Solidity: event MinterChanged(address minter, address newMinter)
func (_EthErc20 *EthErc20Filterer) ParseMinterChanged(log types.Log) (*EthErc20MinterChanged, error) {
	event := new(EthErc20MinterChanged)
	if err := _EthErc20.contract.UnpackLog(event, "MinterChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// EthErc20TransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the EthErc20 contract.
type EthErc20TransferIterator struct {
	Event *EthErc20Transfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *EthErc20TransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(EthErc20Transfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(EthErc20Transfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *EthErc20TransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *EthErc20TransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// EthErc20Transfer represents a Transfer event raised by the EthErc20 contract.
type EthErc20Transfer struct {
	From   common.Address
	To     common.Address
	Amount *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 amount)
func (_EthErc20 *EthErc20Filterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*EthErc20TransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EthErc20.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &EthErc20TransferIterator{contract: _EthErc20.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 amount)
func (_EthErc20 *EthErc20Filterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *EthErc20Transfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _EthErc20.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(EthErc20Transfer)
				if err := _EthErc20.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 amount)
func (_EthErc20 *EthErc20Filterer) ParseTransfer(log types.Log) (*EthErc20Transfer, error) {
	event := new(EthErc20Transfer)
	if err := _EthErc20.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

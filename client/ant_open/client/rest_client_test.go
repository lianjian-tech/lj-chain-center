package ant_open_client

import (
	"encoding/base64"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"github.com/google/uuid"
	"go-chain-center/common/util"
	"testing"
)

var contractName = "xjj_asset"

func NewRestClient() *RestClient {
	return &RestClient{
		Properties: &RestClientProperties{
			BizId:        "",
			Account:      "",
			TenantId:     "",
			KmsId:        "",
			RestUrl:      "",
			AccessId:     "",
			AccessSecret: "",
		},
	}
}

func TestGetRestToken(t *testing.T) {
	restClient := NewRestClient()
	value, _ := restClient.GetRestToken()
	fmt.Printf("value:%v\n", value)
}

func TestRestClient_QueryTransaction(t *testing.T) {
	restClient := NewRestClient()
	//hash := "76c0ced14959863f6a39413112e10dde65c9e5144855aec902000734ab357b11"
	//hash := "9987c3edd847206679896ae824d78a09278b033a6ea9f68d7918ae94c32a1384"
	hash := "2ab27d2a11609ac6c1a991575aec082cc683bcb9dd50f14fdd85ac2e3fbc6b64"
	baseResp, err := restClient.QueryTransaction(hash)
	if err != nil {
		fmt.Errorf("QueryTransactionList error")
		return
	}
	fmt.Printf("baseResp:%v\n", util.ToJSONStr(baseResp))
	if baseResp.Success && baseResp.Code == "200" {
		data := &TransData{}
		json.Unmarshal([]byte(baseResp.Data), data)
		if data.TransactionDO.Data != "" {
			decodeBytes, err := base64.StdEncoding.DecodeString(data.TransactionDO.Data)
			if err != nil {
				fmt.Errorf("DecodeString error\n")
			} else {
				fmt.Printf("content:%v\n", string(decodeBytes))
			}
		}
	}
}

type TransData struct {
	BlockNumber   int64    `json:"blockNumber"`
	Hash          string   `json:"hash"`
	TransactionDO TransSub `json:"transactionDO"`
}

type TransSub struct {
	Data      string `json:"data"`
	Timestamp int64  `json:"timestamp"`
}

func TestRestClient_QueryReceipt(t *testing.T) {
	restClient := NewRestClient()
	hash := "0x19dfbed3d6b5bcb1b5d223fbb87827c2be99fc4677c0c59d94cf53176cf97c28"
	baseResp, err := restClient.QueryReceipt(hash)
	if err != nil {
		fmt.Errorf("QueryTransactionList error")
		return
	}
	fmt.Printf("baseResp:%v\n", util.ToJSONStr(baseResp))
}

func TestRestClient_Deposit(t *testing.T) {
	restClient := NewRestClient()
	u := uuid.New()
	orderId := fmt.Sprintf("flash_order_%v", u.String())
	//content := "Xjj Chain: 数据上链 003. Ant Chain"
	content := "区块链大帅哥"
	gas := int64(0)
	baseResp, err := restClient.Deposit(orderId, content, gas)
	if err != nil {
		fmt.Errorf("Deposit error\n")
		return
	}
	fmt.Printf("baseResp:%v\n", util.ToJSONStr(baseResp))

}

func TestRestClient_DeployContract(t *testing.T) {
	restClient := NewRestClient()
	u := uuid.New()
	orderId := fmt.Sprintf("order_%v", u.String())
	gas := int64(0)
	contractCode := "0x60806040526040518060400160405280600581526020017f466c6173680000000000000000000000000000000000000000000000000000008152506000908051906020019061004f9291906100d8565b506040518060400160405280600b81526020017f466c6173682041737365740000000000000000000000000000000000000000008152506001908051906020019061009b9291906100d8565b506402540be4006002553480156100b157600080fd5b5033600381905550600254600460003381526020019081526020016000208190555061017d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061011957805160ff1916838001178555610147565b82800160010185558215610147579182015b8281111561014657825182559160200191906001019061012b565b5b5090506101549190610158565b5090565b61017a91905b8082111561017657600081600090555060010161015e565b5090565b90565b610dc18061018c6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806390f734141161007157806390f73414146101c85780639551ae4414610218578063b09f12661461030e578063d28d885214610391578063e802044f14610414578063fbecfd2114610464576100a9565b806324e8cb25146100ae578063292245b0146100fe5780633eaaf86b1461014a5780636d51ab48146101685780636e9960c3146101aa575b600080fd5b6100e4600480360360408110156100c457600080fd5b8101908080359060200190929190803590602001909291905050506104be565b604051808215151515815260200191505060405180910390f35b6101346004803603604081101561011457600080fd5b8101908080359060200190929190803590602001909291905050506104d5565b6040518082815260200191505060405180910390f35b610152610504565b6040518082815260200191505060405180910390f35b6101946004803603602081101561017e57600080fd5b810190808035906020019092919050505061050a565b6040518082815260200191505060405180910390f35b6101b2610527565b6040518082815260200191505060405180910390f35b6101fe600480360360408110156101de57600080fd5b810190808035906020019092919080359060200190929190505050610531565b604051808215151515815260200191505060405180910390f35b610220610548565b604051808060200180602001848152602001838103835286818151815260200191508051906020019080838360005b8381101561026a57808201518184015260208101905061024f565b50505050905090810190601f1680156102975780820380516001836020036101000a031916815260200191505b50838103825285818151815260200191508051906020019080838360005b838110156102d05780820151818401526020810190506102b5565b50505050905090810190601f1680156102fd5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390f35b610316610696565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561035657808201518184015260208101905061033b565b50505050905090810190601f1680156103835780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610399610734565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103d95780820151818401526020810190506103be565b50505050905090810190601f1680156104065780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61044a6004803603604081101561042a57600080fd5b8101908080359060200190929190803590602001909291905050506107d2565b604051808215151515815260200191505060405180910390f35b6104a46004803603606081101561047a57600080fd5b810190808035906020019092919080359060200190929190803590602001909291905050506108ec565b604051808215151515815260200191505060405180910390f35b60006104cb338484610945565b6001905092915050565b600060056000848152602001908152602001600020600083815260200190815260200160002054905092915050565b60025481565b600060046000838152602001908152602001600020549050919050565b6000600354905090565b600061053e338484610a6e565b6001905092915050565b6060806000806001600254828054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105e85780601f106105bd576101008083540402835291602001916105e8565b820191906000526020600020905b8154815290600101906020018083116105cb57829003601f168201915b50505050509250818054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106845780601f1061065957610100808354040283529160200191610684565b820191906000526020600020905b81548152906001019060200180831161066757829003601f168201915b50505050509150925092509250909192565b60008054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561072c5780601f106107015761010080835404028352916020019161072c565b820191906000526020600020905b81548152906001019060200180831161070f57829003601f168201915b505050505081565b60018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107ca5780601f1061079f576101008083540402835291602001916107ca565b820191906000526020600020905b8154815290600101906020018083116107ad57829003601f168201915b505050505081565b6000600354331461084b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f5065726d697373696f6e2064656e69656400000000000000000000000000000081525060200191505060405180910390fd5b61086082600254610be890919063ffffffff16565b60028190555061088c826004600086815260200190815260200160002054610be890919063ffffffff16565b60046000858152602001908152602001600020819055507f644212177aed65bbe53444ef1fd2f586fe4318eea4b225123c0fb7837603c4388383604051808381526020018281526020019250505060405180910390a16001905092915050565b60006108f9848484610a6e565b61093a843361093585600560008a8152602001908152602001600020600033815260200190815260200160002054610c7090919063ffffffff16565b610945565b600190509392505050565b600083141561099f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180610cfa6025913960400191505060405180910390fd5b60008214156109f9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180610d1f6023913960400191505060405180910390fd5b80600560008581526020019081526020016000206000848152602001908152602001600020819055507ff1ff7699858f7c3ec738989280008b7d21c44d0e29a2c95de4563fedccd4707b83838360405180848152602001838152602001828152602001935050505060405180910390a1505050565b6000831415610ac8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180610d666026913960400191505060405180910390fd5b6000821415610b22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180610d426024913960400191505060405180910390fd5b610b48816004600086815260200190815260200160002054610c7090919063ffffffff16565b6004600085815260200190815260200160002081905550610b85816004600085815260200190815260200160002054610be890919063ffffffff16565b60046000848152602001908152602001600020819055507ff10b4ee1678e2015e3e918d9224deede58a761246b84747ac86a1bb7e51aa5b583838360405180848152602001838152602001828152602001935050505060405180910390a1505050565b600080828401905083811015610c66576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600082821115610ce8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525060200191505060405180910390fd5b60008284039050809150509291505056fe41737365743a20617070726f76652066726f6d20746865207a65726f206964656e7469747941737365743a20617070726f766520746f20746865207a65726f206964656e7469747941737365743a207472616e7366657220746f20746865207a65726f206964656e7469747941737365743a207472616e736665722066726f6d20746865207a65726f206964656e74697479a2646970667358221220dda8b692d555fe8b63043f1598051bd37887b4e41e0c806c00898f33e5c0382964736f6c63430006040033"
	baseResp, err := restClient.DeployContract(orderId, contractName, contractCode, gas)
	if err != nil {
		fmt.Errorf("DeployContract error\n")
		return
	}
	fmt.Printf("baseResp success:%v\n", baseResp.Success)
	fmt.Printf("baseResp code:%v\n", baseResp.Code)
	fmt.Printf("baseResp data:%v\n", baseResp.Data)
}

func TestRestClient_CallContract01(t *testing.T) {
	restClient := NewRestClient()
	u := uuid.New()
	orderId := fmt.Sprintf("demo21_order_%v", u.String())
	gas := int64(0)
	jsonArr := make([]interface{}, 0)
	inputParamListBytes, err := json.Marshal(&jsonArr)
	if err != nil {
		fmt.Errorf("json.Marshal error\n")
		return
	}
	fmt.Printf("inputParamListBytes:%v\n", string(inputParamListBytes))
	method := "getBaseInfo()"
	outTypes := fmt.Sprintf(`["string", "string", "uint256"]`)
	baseResp, err := restClient.CallContract(orderId, contractName, method, string(inputParamListBytes), outTypes, gas)
	if err != nil {
		fmt.Errorf("CallContract error\n")
		return
	}
	fmt.Printf("baseResp success:%v\n", baseResp.Success)
	fmt.Printf("baseResp code:%v\n", baseResp.Code)
	fmt.Printf("baseResp data:%v\n", baseResp.Data)
	if baseResp.Code != "200" {
		fmt.Errorf("baseResp.Code error:%v\n", baseResp.Code)
		return
	}
	type Outputs struct {
		OutRes []interface{} `json:"outRes"`
	}
	outputs := Outputs{}
	err = json.Unmarshal([]byte(baseResp.Data), &outputs)
	if err != nil {
		fmt.Errorf("json.Unmarshal error\n")
		return
	}
	fmt.Printf("outputs:%v\n", outputs)
	symbol := outputs.OutRes[0].(string)
	name := outputs.OutRes[1].(string)
	totalSupply := outputs.OutRes[2].(float64)
	fmt.Printf("symbol:%v, name:%v, totalSupply:%v\n", symbol, name, totalSupply)

}

func TestRestClient_CallContract02(t *testing.T) {
	restClient := NewRestClient()
	u := uuid.New()
	orderId := fmt.Sprintf("demo21_order_%v", u.String())
	gas := int64(0)
	jsonArr := make([]interface{}, 0)
	inputParamListBytes, err := json.Marshal(&jsonArr)
	if err != nil {
		fmt.Errorf("json.Marshal error\n")
		return
	}
	fmt.Printf("inputParamListBytes:%v\n", string(inputParamListBytes))
	method := "getAdmin()"
	outTypes := fmt.Sprintf(`["identity"]`)
	baseResp, err := restClient.CallContract(orderId, contractName, method, string(inputParamListBytes), outTypes, gas)
	if err != nil {
		fmt.Errorf("CallContract error\n")
		return
	}
	fmt.Printf("baseResp success:%v\n", baseResp.Success)
	fmt.Printf("baseResp code:%v\n", baseResp.Code)
	fmt.Printf("baseResp data:%v\n", baseResp.Data)
	if baseResp.Code != "200" {
		fmt.Errorf("baseResp.Code error:%v\n", baseResp.Code)
		return
	}
	type Outputs struct {
		OutRes []interface{} `json:"outRes"`
	}
	outputs := Outputs{}
	err = json.Unmarshal([]byte(baseResp.Data), &outputs)
	if err != nil {
		fmt.Errorf("json.Unmarshal error\n")
		return
	}
	fmt.Printf("outputs:%v\n", outputs)
	admin := outputs.OutRes[0].(string)
	fmt.Printf("admin:%v\n", admin)

}

// 合约函数参数涉及identity字段 需要转为map形式: [{\"data\":\"UqwrjBh7S9+F/KZUshCQlrJ3wB0lzMiddXMcJc42zTQ=\"}]
// 转换规则: 先对地址做hex.DecodeString, 再做base64.StdEncoding.EncodeToString
func TestRestClient_CallContract03(t *testing.T) {
	restClient := NewRestClient()
	u := uuid.New()
	orderId := fmt.Sprintf("demo21_order_%v", u.String())
	owner := "52ac2b8c187b4bdf85fca654b2109096b277c01d25ccc89d75731c25ce36cd34"
	bytes, _ := hex.DecodeString(owner)
	data := base64.StdEncoding.EncodeToString(bytes)
	gas := int64(0)
	jsonArr := make([]interface{}, 0)
	ownerMap := make(map[string]string)
	ownerMap["data"] = data
	jsonArr = append(jsonArr, ownerMap)
	inputParamListBytes, err := json.Marshal(&jsonArr)
	if err != nil {
		fmt.Errorf("json.Marshal error\n")
		return
	}
	fmt.Printf("inputParamListBytes:%v\n", string(inputParamListBytes))
	method := "balanceOf(identity)"
	outTypes := fmt.Sprintf(`["uint256"]`)
	baseResp, err := restClient.CallContract(orderId, contractName, method, string(inputParamListBytes), outTypes, gas)
	if err != nil {
		fmt.Errorf("CallContract error\n")
		return
	}
	fmt.Printf("baseResp success:%v\n", baseResp.Success)
	fmt.Printf("baseResp code:%v\n", baseResp.Code)
	fmt.Printf("baseResp data:%v\n", baseResp.Data)
	if baseResp.Code != "200" {
		fmt.Errorf("baseResp.Code error:%v\n", baseResp.Code)
		return
	}
	type Outputs struct {
		OutRes []interface{} `json:"outRes"`
	}
	outputs := Outputs{}
	err = json.Unmarshal([]byte(baseResp.Data), &outputs)
	if err != nil {
		fmt.Errorf("json.Unmarshal error\n")
		return
	}
	fmt.Printf("outputs:%v\n", outputs)
	balance := outputs.OutRes[0].(float64)
	fmt.Printf("balance:%v\n", balance)

}

func TestRestClient_CallContract04(t *testing.T) {
	restClient := NewRestClient()
	u := uuid.New()
	orderId := fmt.Sprintf("demo21_order_%v", u.String())
	account := "52ac2b8c187b4bdf85fca654b2109096b277c01d25ccc89d75731c25ce36cd34"
	value := int64(30)
	bytes, _ := hex.DecodeString(account)
	data := base64.StdEncoding.EncodeToString(bytes)
	gas := int64(0)
	jsonArr := make([]interface{}, 0)
	accountMap := make(map[string]string)
	accountMap["data"] = data
	jsonArr = append(jsonArr, accountMap)
	jsonArr = append(jsonArr, value)
	inputParamListBytes, err := json.Marshal(&jsonArr)
	if err != nil {
		fmt.Errorf("json.Marshal error\n")
		return
	}
	fmt.Printf("inputParamListBytes:%v\n", string(inputParamListBytes))
	method := "issue(identity,uint256)"
	outTypes := fmt.Sprintf(`["bool"]`)
	baseResp, err := restClient.CallContract(orderId, contractName, method, string(inputParamListBytes), outTypes, gas)
	if err != nil {
		fmt.Errorf("CallContract error\n")
		return
	}
	fmt.Printf("baseResp success:%v\n", baseResp.Success)
	fmt.Printf("baseResp code:%v\n", baseResp.Code)
	fmt.Printf("baseResp data:%v\n", baseResp.Data)
	if baseResp.Code != "200" {
		fmt.Errorf("baseResp.Code error:%v\n", baseResp.Code)
		return
	}
	type Outputs struct {
		OutRes []interface{} `json:"outRes"`
	}
	outputs := Outputs{}
	err = json.Unmarshal([]byte(baseResp.Data), &outputs)
	if err != nil {
		fmt.Errorf("json.Unmarshal error\n")
		return
	}
	fmt.Printf("outputs:%v\n", outputs)
	result := outputs.OutRes[0].(bool)
	fmt.Printf("result:%v\n", result)

}
